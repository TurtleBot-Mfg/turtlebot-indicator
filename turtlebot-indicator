#!/usr/bin/python
# Software License Agreement (BSD License)
#
# Copyright (c) 2012, I Heart Engineering
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of I Heart Engineering nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

import os
import sys
import gobject
import gtk
import appindicator
import subprocess
import rosgraph.masterapi
import time

class TurtleBotIndicator:
    def __init__(self):
        self._ind = appindicator.Indicator ("turtlebot-indicator", "turtlebot-idle", appindicator.CATEGORY_APPLICATION_STATUS)
        self._ind.set_status (appindicator.STATUS_ACTIVE)
        self._exit = False
        self._menu = gtk.Menu()
        self._menuitem = None
        self._action = 0
        self._SHUTDOWN = 1
        self._STARTUP = 2
        self._master = rosgraph.masterapi.Master('/turtlebot-indicator')
        self._master_update = True
        self._master_online = False
        self._turtlebot_online = False
        self._network_online = False
        self._topics = [] # List of Topics
        self._nodes = [] # List of Topics
        self._pubs = {} # Publishers keyed by topic
        self._subs = {} # Subscribers keyed by topic

    def update(self):
        p = subprocess.Popen(['turtlebot-network','interface'], stdout=subprocess.PIPE)
        output = p.communicate()[0].strip()
        p.wait()
        if output != "lo":
            if not self._network_online:
                self._network_online = True
                self._master_update = True
                self._action = self._STARTUP
        else:
            if self._network_online:
                self._network_online = False
                self._master_update = True
                self._action = self._SHUTDOWN

        if self._action == self._STARTUP and self._turtlebot_online:
            self._action = 0
            self._master_update = True
            self._master_online = True
        elif self._action == self._SHUTDOWN and not self._master.is_online():
            self._action = 0
            self._master_update = True
            self._master_online = False
            self._turtlebot_online = False
            self._topics = []
            self._nodes = []
            self._pubs = {}
            self._subs = {}
        elif not self._master_online and self._master.is_online():
            self._master_update = True
            self._master_online = True
        elif self._master_online and not self._master.is_online():
            self._master_update = True
            self._master_online = False
            self._turtlebot_online = False
            self._topics = []
            self._nodes = []
            self._pubs = {}
            self._subs = {}
        elif self._action == 0:
            self._master_update = False
        self.update_topic_info()
        self.update_node_info()
        if self._master_update:
            self.build_menu()

    def update_topic_info(self):
        if self._master.is_online():
            topic_pubs, topic_subs, srvs = self._master.getSystemState()
            for topic,pubs in topic_pubs:
                self._pubs[topic] = pubs
            for topic,subs in topic_subs:
                self._subs[topic] = subs
            self._topics = list(set(self._pubs.keys() + self._subs.keys()))
            self._topics.sort()
        else:
            self._topics = []
            self._pubs = {}
            self._subs = {}

    def update_node_info(self):
        # This might be wrong because a node may not be puslishing
        # or subscribing, but this is how rosnode does it.
        # If a node never publishes or subscribes, is it really a node?
        if self._master.is_online() and self._topics != None and self._topics != []:
            self._nodes=[]
            for nodes in self._pubs.values():
                self._nodes = self._nodes + nodes
            for nodes in self._subs.values():
                self._nodes = self._nodes + nodes
            self._nodes = list(set(self._nodes))
            if self._master_update:
                self._turtlebot_online = False
            for node in self._nodes:
                if not self._turtlebot_online and node == "/turtlebot_node":
                    self._turtlebot_online = True
                    self._master_update = True
            #self._nodes = list(set(self._pubs.values() + self._subs.values()))

    def menuitem_shutdown (self,item):
        self._action = self._SHUTDOWN
        self._master_update = True
        #self.update()
        p = subprocess.Popen(['gksudo', "initctl stop turtlebot" ], stdout=None)

    def menuitem_startup (self,item):
        self._action = self._STARTUP
        self._master_update = True
        #self.build_menu()
        p = subprocess.Popen(['gksudo', "initctl start turtlebot" ], stdout=None)

    def build_menu(self):
        if self._ind.get_menu() == None:
            self._menu = gtk.Menu()
            self._menu.set_double_buffered(True)
            if self._menuitem == None:
                self._menuitem = gtk.MenuItem()
            self._menu.append(self._menuitem)
            self._ind.set_menu(self._menu)
        else:
            self._menu = self._ind.get_menu()

        if self._network_online:
            if self._action == self._STARTUP:
                self._menuitem.set_label("Starting TurtleBot")
                self._menuitem.set_sensitive(False)
                self._menuitem.show()
            elif self._action == self._SHUTDOWN:
                self._menuitem.set_label("Stopping TurtleBot")
                self._menuitem.set_sensitive(False)
                self._menuitem.show()
            elif self._turtlebot_online:
                self._ind.set_icon ("turtlebot-panel")
                self._menuitem.set_label("Stop TurtleBot")
                self._menuitem.set_sensitive(True)
                self._menuitem.show()
                self._menuitem.connect("activate",self.menuitem_shutdown)
            else:
                self._ind.set_icon ("turtlebot-idle")
                self._menuitem.set_label("Start TurtleBot")
                self._menuitem.set_sensitive(True)
                self._menuitem.show()
                self._menuitem.connect("activate",self.menuitem_startup)
        else:
            self._ind.set_icon ("turtlebot-idle")
            self._menuitem.set_label("disconnected")
            self._menuitem.set_sensitive(False)
            self._menuitem.show()
        self._master_update = False

    def run(self):
        self.update()
        if not self._exit:
            source_id = gobject.timeout_add(500, self.run)

    def start(self):
        self.update()
        self.build_menu()
        self.run()
        try:
            gtk.main()
        except KeyboardInterrupt:
            self.stop()
            sys.exit(os.EX_OK)

    def stop(self):
        self._exit = True

if __name__ == "__main__":
    tbi = TurtleBotIndicator()
    tbi.start()
